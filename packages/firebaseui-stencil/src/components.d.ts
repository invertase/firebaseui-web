/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { FUIConfigStore } from "./config";
import { EmailFormState, EmailLinkFormState, LoginType, PhoneFormState } from "./auth/login-form-controller";
import { RecaptchaVerifier } from "firebase/auth";
export { FUIConfigStore } from "./config";
export { EmailFormState, EmailLinkFormState, LoginType, PhoneFormState } from "./auth/login-form-controller";
export { RecaptchaVerifier } from "firebase/auth";
export namespace Components {
    interface FuiButton {
        "fullWidth"?: boolean;
        "type": string;
    }
    interface FuiEmailForm {
        "config": FUIConfigStore;
        "isSignIn": boolean;
        "state": EmailFormState;
        "validationErrors": { email?: string; password?: string };
    }
    interface FuiEmailLinkForm {
        "config": FUIConfigStore;
        "linkSent": boolean;
        "state": EmailLinkFormState;
        "validationErrors": { email?: string };
    }
    interface FuiFieldset {
        "class"?: string;
        "error"?: boolean;
        "helpText"?: string;
        "inputId"?: string;
        "label"?: string;
        "props": { [key: string]: any };
        "required"?: boolean;
    }
    interface FuiForgotPasswordForm {
        "config": FUIConfigStore;
        "email": string;
        "error"?: string;
        "successMessage"?: string;
    }
    interface FuiGoogleSignIn {
    }
    interface FuiInput {
        "error"?: boolean;
        "inputProps": Omit<InputHTMLAttributes<HTMLInputElement>, 'onInput' | 'onBlur' | 'onFocus' | 'value'>;
        "size": 'sm' | 'md' | 'lg';
        "value": string;
    }
    interface FuiLoginForm {
        "config": FUIConfigStore;
        "formFroms": { [key: string]: any };
        "loginType": LoginType;
        "submit": () => Promise<void>;
    }
    interface FuiPhoneForm {
        "config": FUIConfigStore;
        "state": PhoneFormState;
        "validationErrors": { phoneNumber?: string; verificationCode?: string };
        "verificationSent": boolean;
    }
}
export interface FuiButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLFuiButtonElement;
}
export interface FuiEmailFormCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLFuiEmailFormElement;
}
export interface FuiEmailLinkFormCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLFuiEmailLinkFormElement;
}
export interface FuiForgotPasswordFormCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLFuiForgotPasswordFormElement;
}
export interface FuiGoogleSignInCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLFuiGoogleSignInElement;
}
export interface FuiInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLFuiInputElement;
}
export interface FuiPhoneFormCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLFuiPhoneFormElement;
}
declare global {
    interface HTMLFuiButtonElementEventMap {
        "fuiClick": MouseEvent;
    }
    interface HTMLFuiButtonElement extends Components.FuiButton, HTMLStencilElement {
        addEventListener<K extends keyof HTMLFuiButtonElementEventMap>(type: K, listener: (this: HTMLFuiButtonElement, ev: FuiButtonCustomEvent<HTMLFuiButtonElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLFuiButtonElementEventMap>(type: K, listener: (this: HTMLFuiButtonElement, ev: FuiButtonCustomEvent<HTMLFuiButtonElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLFuiButtonElement: {
        prototype: HTMLFuiButtonElement;
        new (): HTMLFuiButtonElement;
    };
    interface HTMLFuiEmailFormElementEventMap {
        "emailChange": string;
        "passwordChange": string;
        "toggleAuthMode": void;
        "forgotPassword": void;
    }
    interface HTMLFuiEmailFormElement extends Components.FuiEmailForm, HTMLStencilElement {
        addEventListener<K extends keyof HTMLFuiEmailFormElementEventMap>(type: K, listener: (this: HTMLFuiEmailFormElement, ev: FuiEmailFormCustomEvent<HTMLFuiEmailFormElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLFuiEmailFormElementEventMap>(type: K, listener: (this: HTMLFuiEmailFormElement, ev: FuiEmailFormCustomEvent<HTMLFuiEmailFormElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLFuiEmailFormElement: {
        prototype: HTMLFuiEmailFormElement;
        new (): HTMLFuiEmailFormElement;
    };
    interface HTMLFuiEmailLinkFormElementEventMap {
        "emailChange": string;
    }
    interface HTMLFuiEmailLinkFormElement extends Components.FuiEmailLinkForm, HTMLStencilElement {
        addEventListener<K extends keyof HTMLFuiEmailLinkFormElementEventMap>(type: K, listener: (this: HTMLFuiEmailLinkFormElement, ev: FuiEmailLinkFormCustomEvent<HTMLFuiEmailLinkFormElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLFuiEmailLinkFormElementEventMap>(type: K, listener: (this: HTMLFuiEmailLinkFormElement, ev: FuiEmailLinkFormCustomEvent<HTMLFuiEmailLinkFormElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLFuiEmailLinkFormElement: {
        prototype: HTMLFuiEmailLinkFormElement;
        new (): HTMLFuiEmailLinkFormElement;
    };
    interface HTMLFuiFieldsetElement extends Components.FuiFieldset, HTMLStencilElement {
    }
    var HTMLFuiFieldsetElement: {
        prototype: HTMLFuiFieldsetElement;
        new (): HTMLFuiFieldsetElement;
    };
    interface HTMLFuiForgotPasswordFormElementEventMap {
        "emailChange": string;
        "submitReset": void;
        "backToLogin": void;
    }
    interface HTMLFuiForgotPasswordFormElement extends Components.FuiForgotPasswordForm, HTMLStencilElement {
        addEventListener<K extends keyof HTMLFuiForgotPasswordFormElementEventMap>(type: K, listener: (this: HTMLFuiForgotPasswordFormElement, ev: FuiForgotPasswordFormCustomEvent<HTMLFuiForgotPasswordFormElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLFuiForgotPasswordFormElementEventMap>(type: K, listener: (this: HTMLFuiForgotPasswordFormElement, ev: FuiForgotPasswordFormCustomEvent<HTMLFuiForgotPasswordFormElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLFuiForgotPasswordFormElement: {
        prototype: HTMLFuiForgotPasswordFormElement;
        new (): HTMLFuiForgotPasswordFormElement;
    };
    interface HTMLFuiGoogleSignInElementEventMap {
        "signedIn": void;
    }
    interface HTMLFuiGoogleSignInElement extends Components.FuiGoogleSignIn, HTMLStencilElement {
        addEventListener<K extends keyof HTMLFuiGoogleSignInElementEventMap>(type: K, listener: (this: HTMLFuiGoogleSignInElement, ev: FuiGoogleSignInCustomEvent<HTMLFuiGoogleSignInElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLFuiGoogleSignInElementEventMap>(type: K, listener: (this: HTMLFuiGoogleSignInElement, ev: FuiGoogleSignInCustomEvent<HTMLFuiGoogleSignInElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLFuiGoogleSignInElement: {
        prototype: HTMLFuiGoogleSignInElement;
        new (): HTMLFuiGoogleSignInElement;
    };
    interface HTMLFuiInputElementEventMap {
        "fuiInput": InputEvent;
        "fuiBlur": FocusEvent;
        "fuiFocus": FocusEvent;
    }
    interface HTMLFuiInputElement extends Components.FuiInput, HTMLStencilElement {
        addEventListener<K extends keyof HTMLFuiInputElementEventMap>(type: K, listener: (this: HTMLFuiInputElement, ev: FuiInputCustomEvent<HTMLFuiInputElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLFuiInputElementEventMap>(type: K, listener: (this: HTMLFuiInputElement, ev: FuiInputCustomEvent<HTMLFuiInputElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLFuiInputElement: {
        prototype: HTMLFuiInputElement;
        new (): HTMLFuiInputElement;
    };
    interface HTMLFuiLoginFormElement extends Components.FuiLoginForm, HTMLStencilElement {
    }
    var HTMLFuiLoginFormElement: {
        prototype: HTMLFuiLoginFormElement;
        new (): HTMLFuiLoginFormElement;
    };
    interface HTMLFuiPhoneFormElementEventMap {
        "phoneNumberChange": string;
        "verificationCodeChange": string;
        "recaptchaVerifierChange": RecaptchaVerifier;
        "recaptchaVerified": void;
        "canSubmit": boolean;
        "verificationSentChange": boolean;
        "formStateChange": PhoneFormState;
    }
    interface HTMLFuiPhoneFormElement extends Components.FuiPhoneForm, HTMLStencilElement {
        addEventListener<K extends keyof HTMLFuiPhoneFormElementEventMap>(type: K, listener: (this: HTMLFuiPhoneFormElement, ev: FuiPhoneFormCustomEvent<HTMLFuiPhoneFormElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLFuiPhoneFormElementEventMap>(type: K, listener: (this: HTMLFuiPhoneFormElement, ev: FuiPhoneFormCustomEvent<HTMLFuiPhoneFormElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLFuiPhoneFormElement: {
        prototype: HTMLFuiPhoneFormElement;
        new (): HTMLFuiPhoneFormElement;
    };
    interface HTMLElementTagNameMap {
        "fui-button": HTMLFuiButtonElement;
        "fui-email-form": HTMLFuiEmailFormElement;
        "fui-email-link-form": HTMLFuiEmailLinkFormElement;
        "fui-fieldset": HTMLFuiFieldsetElement;
        "fui-forgot-password-form": HTMLFuiForgotPasswordFormElement;
        "fui-google-sign-in": HTMLFuiGoogleSignInElement;
        "fui-input": HTMLFuiInputElement;
        "fui-login-form": HTMLFuiLoginFormElement;
        "fui-phone-form": HTMLFuiPhoneFormElement;
    }
}
declare namespace LocalJSX {
    interface FuiButton {
        "fullWidth"?: boolean;
        "onFuiClick"?: (event: FuiButtonCustomEvent<MouseEvent>) => void;
        "type"?: string;
    }
    interface FuiEmailForm {
        "config"?: FUIConfigStore;
        "isSignIn"?: boolean;
        "onEmailChange"?: (event: FuiEmailFormCustomEvent<string>) => void;
        "onForgotPassword"?: (event: FuiEmailFormCustomEvent<void>) => void;
        "onPasswordChange"?: (event: FuiEmailFormCustomEvent<string>) => void;
        "onToggleAuthMode"?: (event: FuiEmailFormCustomEvent<void>) => void;
        "state"?: EmailFormState;
        "validationErrors"?: { email?: string; password?: string };
    }
    interface FuiEmailLinkForm {
        "config"?: FUIConfigStore;
        "linkSent"?: boolean;
        "onEmailChange"?: (event: FuiEmailLinkFormCustomEvent<string>) => void;
        "state"?: EmailLinkFormState;
        "validationErrors"?: { email?: string };
    }
    interface FuiFieldset {
        "class"?: string;
        "error"?: boolean;
        "helpText"?: string;
        "inputId"?: string;
        "label"?: string;
        "props"?: { [key: string]: any };
        "required"?: boolean;
    }
    interface FuiForgotPasswordForm {
        "config"?: FUIConfigStore;
        "email"?: string;
        "error"?: string;
        "onBackToLogin"?: (event: FuiForgotPasswordFormCustomEvent<void>) => void;
        "onEmailChange"?: (event: FuiForgotPasswordFormCustomEvent<string>) => void;
        "onSubmitReset"?: (event: FuiForgotPasswordFormCustomEvent<void>) => void;
        "successMessage"?: string;
    }
    interface FuiGoogleSignIn {
        "onSignedIn"?: (event: FuiGoogleSignInCustomEvent<void>) => void;
    }
    interface FuiInput {
        "error"?: boolean;
        "inputProps"?: Omit<InputHTMLAttributes<HTMLInputElement>, 'onInput' | 'onBlur' | 'onFocus' | 'value'>;
        "onFuiBlur"?: (event: FuiInputCustomEvent<FocusEvent>) => void;
        "onFuiFocus"?: (event: FuiInputCustomEvent<FocusEvent>) => void;
        "onFuiInput"?: (event: FuiInputCustomEvent<InputEvent>) => void;
        "size"?: 'sm' | 'md' | 'lg';
        "value"?: string;
    }
    interface FuiLoginForm {
        "config"?: FUIConfigStore;
        "formFroms"?: { [key: string]: any };
        "loginType"?: LoginType;
    }
    interface FuiPhoneForm {
        "config"?: FUIConfigStore;
        "onCanSubmit"?: (event: FuiPhoneFormCustomEvent<boolean>) => void;
        "onFormStateChange"?: (event: FuiPhoneFormCustomEvent<PhoneFormState>) => void;
        "onPhoneNumberChange"?: (event: FuiPhoneFormCustomEvent<string>) => void;
        "onRecaptchaVerified"?: (event: FuiPhoneFormCustomEvent<void>) => void;
        "onRecaptchaVerifierChange"?: (event: FuiPhoneFormCustomEvent<RecaptchaVerifier>) => void;
        "onVerificationCodeChange"?: (event: FuiPhoneFormCustomEvent<string>) => void;
        "onVerificationSentChange"?: (event: FuiPhoneFormCustomEvent<boolean>) => void;
        "state"?: PhoneFormState;
        "validationErrors"?: { phoneNumber?: string; verificationCode?: string };
        "verificationSent"?: boolean;
    }
    interface IntrinsicElements {
        "fui-button": FuiButton;
        "fui-email-form": FuiEmailForm;
        "fui-email-link-form": FuiEmailLinkForm;
        "fui-fieldset": FuiFieldset;
        "fui-forgot-password-form": FuiForgotPasswordForm;
        "fui-google-sign-in": FuiGoogleSignIn;
        "fui-input": FuiInput;
        "fui-login-form": FuiLoginForm;
        "fui-phone-form": FuiPhoneForm;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "fui-button": LocalJSX.FuiButton & JSXBase.HTMLAttributes<HTMLFuiButtonElement>;
            "fui-email-form": LocalJSX.FuiEmailForm & JSXBase.HTMLAttributes<HTMLFuiEmailFormElement>;
            "fui-email-link-form": LocalJSX.FuiEmailLinkForm & JSXBase.HTMLAttributes<HTMLFuiEmailLinkFormElement>;
            "fui-fieldset": LocalJSX.FuiFieldset & JSXBase.HTMLAttributes<HTMLFuiFieldsetElement>;
            "fui-forgot-password-form": LocalJSX.FuiForgotPasswordForm & JSXBase.HTMLAttributes<HTMLFuiForgotPasswordFormElement>;
            "fui-google-sign-in": LocalJSX.FuiGoogleSignIn & JSXBase.HTMLAttributes<HTMLFuiGoogleSignInElement>;
            "fui-input": LocalJSX.FuiInput & JSXBase.HTMLAttributes<HTMLFuiInputElement>;
            "fui-login-form": LocalJSX.FuiLoginForm & JSXBase.HTMLAttributes<HTMLFuiLoginFormElement>;
            "fui-phone-form": LocalJSX.FuiPhoneForm & JSXBase.HTMLAttributes<HTMLFuiPhoneFormElement>;
        }
    }
}
