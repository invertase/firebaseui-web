/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface FuiButton {
        "fullWidth"?: boolean;
        "type": string;
    }
    interface FuiFieldset {
        "class"?: string;
        "error"?: boolean;
        "helpText"?: string;
        "inputId"?: string;
        "label"?: string;
        "props": { [key: string]: any };
        "required"?: boolean;
    }
    interface FuiInput {
        "error"?: boolean;
        "inputProps": Omit<InputHTMLAttributes<HTMLInputElement>, 'onInput' | 'onBlur' | 'onFocus' | 'value' | 'class'>;
        "size": 'sm' | 'md' | 'lg';
        "value": string;
    }
    interface FuiLoginForm {
        "props": { [key: string]: any };
        "submit": () => Promise<void>;
    }
}
export interface FuiButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLFuiButtonElement;
}
export interface FuiInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLFuiInputElement;
}
declare global {
    interface HTMLFuiButtonElementEventMap {
        "fuiClick": MouseEvent;
    }
    interface HTMLFuiButtonElement extends Components.FuiButton, HTMLStencilElement {
        addEventListener<K extends keyof HTMLFuiButtonElementEventMap>(type: K, listener: (this: HTMLFuiButtonElement, ev: FuiButtonCustomEvent<HTMLFuiButtonElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLFuiButtonElementEventMap>(type: K, listener: (this: HTMLFuiButtonElement, ev: FuiButtonCustomEvent<HTMLFuiButtonElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLFuiButtonElement: {
        prototype: HTMLFuiButtonElement;
        new (): HTMLFuiButtonElement;
    };
    interface HTMLFuiFieldsetElement extends Components.FuiFieldset, HTMLStencilElement {
    }
    var HTMLFuiFieldsetElement: {
        prototype: HTMLFuiFieldsetElement;
        new (): HTMLFuiFieldsetElement;
    };
    interface HTMLFuiInputElementEventMap {
        "fuiInput": InputEvent;
        "fuiBlur": FocusEvent;
        "fuiFocus": FocusEvent;
    }
    interface HTMLFuiInputElement extends Components.FuiInput, HTMLStencilElement {
        addEventListener<K extends keyof HTMLFuiInputElementEventMap>(type: K, listener: (this: HTMLFuiInputElement, ev: FuiInputCustomEvent<HTMLFuiInputElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLFuiInputElementEventMap>(type: K, listener: (this: HTMLFuiInputElement, ev: FuiInputCustomEvent<HTMLFuiInputElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLFuiInputElement: {
        prototype: HTMLFuiInputElement;
        new (): HTMLFuiInputElement;
    };
    interface HTMLFuiLoginFormElement extends Components.FuiLoginForm, HTMLStencilElement {
    }
    var HTMLFuiLoginFormElement: {
        prototype: HTMLFuiLoginFormElement;
        new (): HTMLFuiLoginFormElement;
    };
    interface HTMLElementTagNameMap {
        "fui-button": HTMLFuiButtonElement;
        "fui-fieldset": HTMLFuiFieldsetElement;
        "fui-input": HTMLFuiInputElement;
        "fui-login-form": HTMLFuiLoginFormElement;
    }
}
declare namespace LocalJSX {
    interface FuiButton {
        "fullWidth"?: boolean;
        "onFuiClick"?: (event: FuiButtonCustomEvent<MouseEvent>) => void;
        "type"?: string;
    }
    interface FuiFieldset {
        "class"?: string;
        "error"?: boolean;
        "helpText"?: string;
        "inputId"?: string;
        "label"?: string;
        "props"?: { [key: string]: any };
        "required"?: boolean;
    }
    interface FuiInput {
        "error"?: boolean;
        "inputProps"?: Omit<InputHTMLAttributes<HTMLInputElement>, 'onInput' | 'onBlur' | 'onFocus' | 'value' | 'class'>;
        "onFuiBlur"?: (event: FuiInputCustomEvent<FocusEvent>) => void;
        "onFuiFocus"?: (event: FuiInputCustomEvent<FocusEvent>) => void;
        "onFuiInput"?: (event: FuiInputCustomEvent<InputEvent>) => void;
        "size"?: 'sm' | 'md' | 'lg';
        "value"?: string;
    }
    interface FuiLoginForm {
        "props"?: { [key: string]: any };
    }
    interface IntrinsicElements {
        "fui-button": FuiButton;
        "fui-fieldset": FuiFieldset;
        "fui-input": FuiInput;
        "fui-login-form": FuiLoginForm;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "fui-button": LocalJSX.FuiButton & JSXBase.HTMLAttributes<HTMLFuiButtonElement>;
            "fui-fieldset": LocalJSX.FuiFieldset & JSXBase.HTMLAttributes<HTMLFuiFieldsetElement>;
            "fui-input": LocalJSX.FuiInput & JSXBase.HTMLAttributes<HTMLFuiInputElement>;
            "fui-login-form": LocalJSX.FuiLoginForm & JSXBase.HTMLAttributes<HTMLFuiLoginFormElement>;
        }
    }
}
